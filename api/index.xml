<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apis on FINTLabs Technical Docs</title>
    <link>https://fintlabs.github.io/api/</link>
    <description>Recent content in Apis on FINTLabs Technical Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://fintlabs.github.io/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>REST APIs</title>
      <link>https://fintlabs.github.io/api/rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/rest/</guid>
      <description>REST? HATEOAS? HAL? tl;dr: The basis for almost all modern web-based APIs.
Representational state transfer https://en.wikipedia.org/wiki/Representational_state_transfer
Hypermedia As The Engine Of Application State https://en.wikipedia.org/wiki/HATEOAS
Hypertext Application Language https://en.wikipedia.org/wiki/Hypertext_Application_Language</description>
    </item>
    
    <item>
      <title>Overview of FINT&#39;s APIs</title>
      <link>https://fintlabs.github.io/api/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/overview/</guid>
      <description>Information Model at the Center In FINT APIs, the information model defines how the APIs are structured and how they function.
Types of classes The FINT information model has four types of classes:
 Main classes (hovedklasse) Abstract classes Complex datatypes References  Only main classes are directly accessible from FINT APIs, and every main class in the model has an API endpoint.
All other types are used to construct the main classes, either by abstraction of common fields, or to represent fields in the classes.</description>
    </item>
    
    <item>
      <title>Using FINT APIs</title>
      <link>https://fintlabs.github.io/api/guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/guidelines/</guid>
      <description>General guidelines To get the most value from FINT APIs, some guidelines to follow.
Information is a Graph FINT&amp;rsquo;s resources have relatively few attributes, but more relations. Every resource only has the attributes that are directly relevant for the resource. Everything else is represented as relations (links) to other resources. As an example, the class Personalressurs, representing an employee, does not have the employee&amp;rsquo;s name. Instead there is a link to Person, representing a private person, where you find the properties of the employee as a private person.</description>
    </item>
    
    <item>
      <title>Updating information using FINT APIs</title>
      <link>https://fintlabs.github.io/api/updating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/updating/</guid>
      <description>Updating information using FINT Updates use HTTP operations to create, modify and delete information. It builds upon the &amp;ldquo;everything is a resource&amp;rdquo; principle, so when updating information the resource URI is central.
Asynchronous operations Since the updates must propagate via the FINT component and an adapter before being processed by the back end system, updates might take some time to complete. For this, FINT APIs use asynchronous operations as described in http://restcookbook.</description>
    </item>
    
    <item>
      <title>Accessing FINT</title>
      <link>https://fintlabs.github.io/api/accessing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/accessing/</guid>
      <description>All FINT APIs are protected, and require Bearer token authorization.
OAuth 2.0 Resource Owner Credentials Flow To access FINT resources, a valid Bearer token must be obtained from the FINT IDP. Authorization details are available from the FINT customer portal, https://kunde.felleskomponent.no
Example projects for accessing FINT data  Java, using Spring Boot: https://github.com/FINTLabs/client-example-spring Java, using Google HTTP and OAuth libraries: https://github.com/FINTLabs/client-example-plain-java Node.JS: https://github.com/FINTLabs/client-example-node Kotlin, using Spring Boot: https://github.com/FINTLabs/client-example-kotlin-spring Elm: https://github.</description>
    </item>
    
    <item>
      <title>JSON Schema</title>
      <link>https://fintlabs.github.io/api/schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/schema/</guid>
      <description>FINT offer draft-07 JSON Schema for all classes in the FINT information model. These are available under https://fintlabs.no/schema/
To find a particular schema, the domain of the resource class and the name of the resource is added to the URI in the form &amp;lt;domain&amp;gt;/&amp;lt;class&amp;gt;.json
For insance, the schema for Personalressurs is available at https://fintlabs.no/schema/administrasjon/personalressurs.json</description>
    </item>
    
    <item>
      <title>GraphQL API</title>
      <link>https://fintlabs.github.io/api/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/graphql/</guid>
      <description>FINT also offers an experimental GraphQL API for accessing data as a graph.
The GraphQL endpoint is at /graphql/graphql. It requires the same Bearer token as the rest of the FINT APIs.
Our recommended client to test GrapqQL is https://insomnia.rest - using this the OAuth credentials from the customer portal can be used directly as an Environment.
Create a POST request to the GraphQL endpoint, configure OAuth 2, and Insomnia fetches the GraphQL schema so you can validate the query and see the results.</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://fintlabs.github.io/api/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/tools/</guid>
      <description>fint-curl This script can be used to fetch a protected FINT resource, fetching a bearer token when needed.
To use it, copy the client authorization details from https://kunde.felleskomponent.no to a file called client.json in the current directory. The name and location of this file can be overridden using the environment variable CLIENT.
#!/bin/bash #set -x if [[ ! -x /usr/bin/curl ]] || [[ ! -x /usr/bin/jq ]] then echo &amp;quot;Required tools curl and jq not installed&amp;quot; exit 1 fi CLIENT=${CLIENT:-client.</description>
    </item>
    
  </channel>
</rss>