<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FINTLabs Technical Docs</title>
    <link>https://fintlabs.github.io/</link>
    <description>Recent content on FINTLabs Technical Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Apr 2017 11:49:04 +0200</lastBuildDate>
    
	<atom:link href="https://fintlabs.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Technical Overview Of Adapters</title>
      <link>https://fintlabs.github.io/adapter/overview/</link>
      <pubDate>Wed, 26 Apr 2017 11:49:04 +0200</pubDate>
      
      <guid>https://fintlabs.github.io/adapter/overview/</guid>
      <description>Introduction A Common API is a API on a business application. The Common API gets and sends information to/from a business application through an adapter. This document aims to describe how an adapter should be implemented.
Architectural overview - Common API Information Models The Common API consist of standardized information models that will presented as resources in the Consumer API. Each Common API can consist of one or more information models.</description>
    </item>
    
    <item>
      <title>A Overview Of the FINT Information Models</title>
      <link>https://fintlabs.github.io/models/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/models/overview/</guid>
      <description></description>
    </item>
    
    <item>
      <title>REST APIs</title>
      <link>https://fintlabs.github.io/api/rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/rest/</guid>
      <description>REST? HATEOAS? HAL? tl;dr: The basis for almost all modern web-based APIs.
Representational state transfer https://en.wikipedia.org/wiki/Representational_state_transfer
Hypermedia As The Engine Of Application State https://en.wikipedia.org/wiki/HATEOAS
Hypertext Application Language https://en.wikipedia.org/wiki/Hypertext_Application_Language</description>
    </item>
    
    <item>
      <title>Develop adapters</title>
      <link>https://fintlabs.github.io/adapter/guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/adapter/guidelines/</guid>
      <description>Introduction This articel amins to make you able to develop a FINT adapter.
Getting started A good startingpoint for developing an adapter is to go throug our quick tutorial:
 Java C#  After that you can setup your adapter skeleton of choice:
 Java skeleton C# (.NET core) skeleton  What does the skeleton do and what do you need to do? The skeletons has all the code to:</description>
    </item>
    
    <item>
      <title>Models and Common API</title>
      <link>https://fintlabs.github.io/adapter/models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/adapter/models/</guid>
      <description>Introduction FINT Information models are models used in the Common API. The models contains information resoures the county council use in their day to day tasks. FINT aims to develop this model to contain vital information in all the areas the county council operates in. This means that every new version will contain more information and an new areas.
Versioning FINT is using semantic versioning for its models:
 MAJOR version have backwards incompatible changes MINOR (feature release) versions add functionality in a backwards-compatible manner, and PATCH (bug fixes) versions add backwards-compatible bug fixes.</description>
    </item>
    
    <item>
      <title>Overview of FINT&#39;s APIs</title>
      <link>https://fintlabs.github.io/api/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/overview/</guid>
      <description>Information Model at the Center In FINT APIs, the information model defines how the APIs are structured and how they function.
Types of classes The FINT information model has four types of classes:
 Main classes (hovedklasse) Abstract classes Complex datatypes References  Only main classes are directly accessible from FINT APIs, and every main class in the model has an API endpoint.
All other types are used to construct the main classes, either by abstraction of common fields, or to represent fields in the classes.</description>
    </item>
    
    <item>
      <title>Adapter Events</title>
      <link>https://fintlabs.github.io/adapter/events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/adapter/events/</guid>
      <description>FINT Adapter Events The general flow between FINT and adapters are:
 Adapter subscribes to events using the SSE endpoint FINT delivers events on the SSE stream Adapter accepts the event by POSTing to the status endpoint. There is a 2-minute timeout on accepting events. If you use the adapter skeleton this is already handled. Adapter responds to the event by POSTing to the response endpoint. There is a 15-minute timeout on responding to events.</description>
    </item>
    
    <item>
      <title>Error handling</title>
      <link>https://fintlabs.github.io/adapter/errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/adapter/errors/</guid>
      <description>How to deal with errors Since UPDATE_ events involves multiple components and is based on events, errors are bound to happen.
Update conflicts Sometimes the update attempted is in conflict with other data in the back-end system. This could for instance be:
 Attempts to create data with identifiers that refer to existing information. Modifications that create illegal state when combined with existing information.  In both cases, the adapter must reject the update with CONFLICT response status.</description>
    </item>
    
    <item>
      <title>Using FINT APIs</title>
      <link>https://fintlabs.github.io/api/guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/guidelines/</guid>
      <description>General guidelines To get the most value from FINT APIs, some guidelines to follow.
Information is a Graph FINT&amp;rsquo;s resources have relatively few attributes, but more relations. Every resource only has the attributes that are directly relevant for the resource. Everything else is represented as relations (links) to other resources. As an example, the class Personalressurs, representing an employee, does not have the employee&amp;rsquo;s name. Instead there is a link to Person, representing a private person, where you find the properties of the employee as a private person.</description>
    </item>
    
    <item>
      <title>Updating information using FINT APIs</title>
      <link>https://fintlabs.github.io/api/updating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/updating/</guid>
      <description>Updating information using FINT Updates use HTTP operations to create, modify and delete information. It builds upon the &amp;ldquo;everything is a resource&amp;rdquo; principle, so when updating information the resource URI is central.
Asynchronous operations Since the updates must propagate via the FINT component and an adapter before being processed by the back end system, updates might take some time to complete. For this, FINT APIs use asynchronous operations as described in http://restcookbook.</description>
    </item>
    
    <item>
      <title>Accessing FINT</title>
      <link>https://fintlabs.github.io/api/accessing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/accessing/</guid>
      <description>All FINT APIs are protected, and require Bearer token authorization.
OAuth 2.0 Resource Owner Credentials Flow To access FINT resources, a valid Bearer token must be obtained from the FINT IDP. Authorization details are available from the FINT customer portal, https://kunde.felleskomponent.no
Example projects for accessing FINT data  Java, using Spring Boot: https://github.com/FINTLabs/client-example-spring Java, using Google HTTP and OAuth libraries: https://github.com/FINTLabs/client-example-plain-java Node.JS: https://github.com/FINTLabs/client-example-node Kotlin, using Spring Boot: https://github.com/FINTLabs/client-example-kotlin-spring Elm: https://github.</description>
    </item>
    
    <item>
      <title>Tutorial: Java SSE adapter</title>
      <link>https://fintlabs.github.io/adapter/tut-java-sse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/adapter/tut-java-sse/</guid>
      <description>Introduction This tutorial will lead you through the process of setting up and adapter to communicate with the Play-With-FINT-Adapter service.
Setting up the environment Clone the skeleton $ git clone https://github.com/FINTLabs/fint-sse-adapter-skeleton.git my-adapter $ cd my-adapter $ rm -rf .git  Open the project in your favorite IDE This is a Gradle project so make sure to import the Gradle dependencies. You can either do it in the IDE or in the commandline:</description>
    </item>
    
    <item>
      <title>Tutorial: .Net SSE adapter</title>
      <link>https://fintlabs.github.io/adapter/tut-dotnet-sse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/adapter/tut-dotnet-sse/</guid>
      <description>Introduction This tutorial will lead you through the process of setting up and adapter to communicate with the Play-With-FINT-Adapter service.
Setting up the enviornment Clone the skeleton $ git clone https://github.com/FINTprosjektet/Fint.Sse.Adapter.Skeleton.git my-adapter $ cd my-adapter $ rm -rf .git  Open the project in our favorite IDE This is a netcoreapp2.0\netstandard2.0 project. You need to import the dependencies. You can either do it in the IDE or in the commandline.</description>
    </item>
    
    <item>
      <title>JSON Schema</title>
      <link>https://fintlabs.github.io/api/schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/schema/</guid>
      <description>FINT offer draft-07 JSON Schema for all classes in the FINT information model. These are available under https://fintlabs.no/schema/
To find a particular schema, the domain of the resource class and the name of the resource is added to the URI in the form &amp;lt;domain&amp;gt;/&amp;lt;class&amp;gt;.json
For insance, the schema for Personalressurs is available at https://fintlabs.no/schema/administrasjon/personalressurs.json</description>
    </item>
    
    <item>
      <title>GraphQL API</title>
      <link>https://fintlabs.github.io/api/graphql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/graphql/</guid>
      <description>FINT also offers an experimental GraphQL API for accessing data as a graph.
The GraphQL endpoint is at /graphql/graphql. It requires the same Bearer token as the rest of the FINT APIs.
Our recommended client to test GrapqQL is https://insomnia.rest - using this the OAuth credentials from the customer portal can be used directly as an Environment.
Create a POST request to the GraphQL endpoint, configure OAuth 2, and Insomnia fetches the GraphQL schema so you can validate the query and see the results.</description>
    </item>
    
    <item>
      <title>Tools</title>
      <link>https://fintlabs.github.io/api/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/api/tools/</guid>
      <description>FINT Test Client FINT has a web-based test client for accessing and inspecting data available through FINT.
This test client is available under the URL /test-client/ for each environment, i.e.:
 https://play-with-fint.felleskomponent.no/test-client/ https://beta.felleskomponent.no/test-client/ https://api.felleskomponent.no/test-client/  For Play-with-FINT the test client immediately presents you with the welcome page where you can enter the URI for a resource to access. The other two requires authentication, so you&amp;rsquo;ll need to provide valid authorization details for a client from FINT&amp;rsquo;s customer portal.</description>
    </item>
    
    <item>
      <title>Information Model Documentation Portal</title>
      <link>https://fintlabs.github.io/models/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fintlabs.github.io/models/documentation/</guid>
      <description>Go directly to the documentation portal 
Introduction The models are designed and documented in Enterprise Architect (EA). You can find the EA project at https://github.com/FINTprosjektet/fint-informasjonsmodell.
Documentation portal For a more userfriendly view of the models we developet a frontend to the XMI 2.1 export from EA. You can find the documentation portal at https://informasjonsmodell.felleskomponent.no.
The project for the frontend is found here.
Contribute If you find bugs or have suggestions for improvement please feel free to submit an issue.</description>
    </item>
    
  </channel>
</rss>